/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/nuRuZdu6eqb
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { JSX, SVGProps, useState } from "react"
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"

export function Chat3() {
  const [isRecording, setIsRecording] = useState(false)
  const handleMicClick = () => {
    setIsRecording(!isRecording)
  }
  return (
    <div className="flex flex-col h-screen dark:bg-muted">
      <header className="text-muted-foreground p-4 shadow-md dark:bg-muted-foreground dark:text-muted">
        <div className="container mx-auto flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Avatar className="w-8 h-8 rounded-full">
              <AvatarImage src="/placeholder-user.jpg" />
              <AvatarFallback>AI</AvatarFallback>
            </Avatar>
            <h1 className="text-lg font-semibold">AI Chat</h1>
          </div>
          <Button variant="ghost" size="icon" className="rounded-full">
            <SettingsIcon className="w-5 h-5" />
            <span className="sr-only">Settings</span>
          </Button>
        </div>
      </header>
      <main className="flex-1 overflow-auto p-4">
        <div className="container mx-auto max-w-2xl space-y-4">
          <div className="flex items-start gap-4">
            <Avatar className="w-8 h-8 rounded-full">
              <AvatarImage src="/placeholder-user.jpg" />
              <AvatarFallback>U</AvatarFallback>
            </Avatar>
            <div className="bg-card p-3 rounded-2xl max-w-[70%] dark:bg-muted-foreground dark:text-muted">
              <p>Hello, how are you today?</p>
            </div>
          </div>
          <div className="flex items-start gap-4 justify-end">
            <div className="bg-primary p-3 rounded-2xl max-w-[70%] text-primary-foreground dark:bg-primary dark:text-primary-foreground">
              <p>I&aposm doing well, thank you for asking! How can I assist you today?</p>
            </div>
            <Avatar className="w-8 h-8 rounded-full">
              <AvatarImage src="/placeholder-user.jpg" />
              <AvatarFallback>AI</AvatarFallback>
            </Avatar>
          </div>
          <div className="flex items-start gap-4">
            <Avatar className="w-8 h-8 rounded-full">
              <AvatarImage src="/placeholder-user.jpg" />
              <AvatarFallback>U</AvatarFallback>
            </Avatar>
            <div className="bg-card p-3 rounded-2xl max-w-[70%] dark:bg-muted-foreground dark:text-muted">
              <p>I have a question about your capabilities. What can you help me with?</p>
            </div>
          </div>
          <div className="flex items-start gap-4 justify-end">
            <div className="bg-primary p-3 rounded-2xl max-w-[70%] text-primary-foreground dark:bg-primary dark:text-primary-foreground">
              <p>
                I&aposm an advanced language model with a wide range of capabilities. I can assist you with tasks like
                research, analysis, writing, coding, and more. What kind of help do you need?
              </p>
            </div>
            <Avatar className="w-8 h-8 rounded-full">
              <AvatarImage src="/placeholder-user.jpg" />
              <AvatarFallback>AI</AvatarFallback>
            </Avatar>
          </div>
        </div>
      </main>
      <footer className="bg-background p-4 shadow-md dark:bg-muted-foreground dark:text-muted">
        <div className="container mx-auto flex items-center gap-2">
          <Button
            // variant={isRecording ? "primary" : "ghost"}
            size="icon"
            className={`rounded-full ${isRecording ? "animate-pulse bg-primary text-primary-foreground" : ""}`}
            onClick={handleMicClick}
          >
            <MicIcon className={`w-5 h-5 ${isRecording ? "text-primary-foreground" : "text-muted-foreground"}`} />
            <div
              className={`flex items-center gap-1 text-primary-foreground absolute bottom-0 -translate-y-full ${
                isRecording ? "flex" : "hidden"
              }`}
            >
              <div className="w-2 h-2 rounded-full bg-current animate-pulse-dots" />
              <div className="w-2 h-2 rounded-full bg-current animate-pulse-dots delay-100" />
              <div className="w-2 h-2 rounded-full bg-current animate-pulse-dots delay-200" />
            </div>
            <span className="sr-only">Record</span>
          </Button>
          <Textarea
            placeholder="Type your message..."
            className="flex-1 rounded-2xl p-2 focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary dark:bg-muted dark:text-muted-foreground resize-none"
          />
          <Button className="rounded-full bg-primary text-primary-foreground">
            <SendIcon className="w-5 h-5 bg-primary text-primary-foreground" />
            <span className="sr-only">Send</span>
          </Button>
        </div>
      </footer>
    </div>
  )
}

function MicIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z" />
      <path d="M19 10v2a7 7 0 0 1-14 0v-2" />
      <line x1="12" x2="12" y1="19" y2="22" />
    </svg>
  )
}


function SendIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m22 2-7 20-4-9-9-4Z" />
      <path d="M22 2 11 13" />
    </svg>
  )
}


function SettingsIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
      <circle cx="12" cy="12" r="3" />
    </svg>
  )
}


function XIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
