datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN

  @@map("roles")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role?
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  UserGroqToken UserGroqToken[]
  chats         Chat[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model UserGroqToken {
  identifier String
  userId     String
  token      String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([identifier])
  @@map("user_groq_token")
}

model Chat {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  messages  Message[]

  @@map("chats")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  role       String
  createdAt  DateTime @default(now())
  chat       Chat     @relation(fields: [chatId], references: [id])
  chatId     String
  model      Model    @relation(fields: [modelId], references: [id])
  modelId    String
  inputType  String   @default("text")
  inputImage String?

  @@map("messages")
}

model Model {
  id          String    @id @default(cuid())
  name        String
  provider    String
  description String?
  messages    Message[]

  @@map("models")
}

model ModelProvider {
  id          String @id @default(cuid())
  name        String
  description String?

  @@map("model_providers")
}

